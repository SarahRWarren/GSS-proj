library(shiny)
library(shinyjs)
library(shinyWidgets)
library(htmlTable)
#install.packages("remotes")
library(remotes)
#remotes::install_github("limnotrack/rdrop2")
library(rdrop2)
library(DT)
library(dplyr)
library(tidyverse)

#install.packages("fastmap", repos="http://cran.rstudio.com/", dependencies=TRUE)



###UI
ui <- fluidPage(
  tags$head(
    #tags$script(jscode),
    tags$style(
      "p{font-family:Arial;font-size:14px;width:95%;margin:auto;}"),
    ## Makes text in tables narrow so they fit the page. "Fixed" forces each
    ## each cell to have constant width so 100% doesn't take up more space.
    tags$style(HTML(
      'table {font-family:Arial Narrow;table-layout:fixed;}'
      # td {width: 2.9em;overflow: hidden;}
    ))), 
  br(),
  uiOutput("MainAction"), 
  br(),
  uiOutput("previousbutton", inline = TRUE),
  uiOutput("nextbutton", inline = TRUE),
  
  useShinyjs()
  
)

server <- function(input, output, session) {
  
  
  #what we need
  #1. page explaining utility function and ideal point
  #2. voting pages against alternatives
  #3. likerts
  #4. Ranked choice
  
  #### assigning likert 3,5,7
  
  likerts <- c(3,5,7)
  likert_cond <- sample(likerts,1)
  
  ### assigning ideal points: on diag, off-up, off-down
  on <- c(5,5)
  off_up <- c(2,7)
  off_down <- c(7,2)
  
  draw_ideal_cond <- c(1,2,3)
  
  ideal_cond <- sample(draw_ideal_cond,1)
  
  ideal_point <- case_when(ideal_cond==1 ~ on,
                           ideal_cond==2 ~ off_up,
                           ideal_cond==3 ~ off_down)
  
  ### weights <- high or low
  
  weights <- c(0.3,0.7)
  
  weights_cond <- sample(weights,1)
  
  
  utility <- weights_cond*(ideal_point[1] + ideal_point[2])
  
  ## define policy alternatives
  alt1 <- c(2,2)
  alt2 <- c(7,7)
  alt3 <- c(9,1)
  alt4 <- c(1,9)
  alt5 <- c(4,4)
  alt6 <- c(1,1)
  alt7 <- c(1,10)
  
  
points <- as.data.frame(rbind(ideal_point,alt1,alt2,alt3,alt4,alt5,alt6,alt7))

  output$plot <- renderPlot({
    plot(points$V1, points$V2)
  }, res = 100)
  
  output$info <- renderPrint({
    req(input$plot_click)
    x <- round(input$plot_click$x, 0)
    y <- round(input$plot_click$y, 0)
    cat("[", x, ", ", y, "]", " Your payoff from this policy is:", weights_cond*x+weights_cond*y, sep = "")
  })
  
  
  
  b=2
  question <- reactiveValues(i = -b) 
  
  
  ## Next and previous buttons ####
  observeEvent(input$previousquestion, {question$i <- ifelse(
    question$i < b & question$i != 1,max(question$i - 1, -b), question$i)})
  
  ##now: conditions for when people can hit "next"
  observeEvent(input$nextquestion, {if(
    (question$i == -b & length(input$first_page) > 0) |
    (question$i == (-b + 1) & length(input$sec_page) > 0))
    question$i <- min(question$i+1, b)
  })
  
  ## Previous button: Grayed out on first page, first q, and after submission
  output$previousbutton <- renderUI({
    actionButton(
      "previousquestion", icon=icon("angle-left"), label="Previous",
      style = if (question$i > -b & question$i <= b & question$i != 1)
        "color: #000" else "color: #aaa")
  })
  
  output$nextbutton <- renderUI({
    actionButton(
      "nextquestion", icon=icon("angle-right"), label="Next",
      style=if (
        (question$i == -b & length(input$first_page) > 0) |
        (question$i == (-b + 1) & length(input$sec_page) > 0))
        "color: #000" else "color: #aaa")
  }) 
  
  
  
  
  ##APP    2
  output$MainAction <- renderUI({ dynamicUi() })
  
  
  dynamicUi <- reactive({
    if (question$i==-b) {
      return(list(
        
        p("The proposed point in this round is:", alt1[1],",", alt1[2]),
        p("Remember, your ideal point is:", ideal_point[1],",", ideal_point[2]),
        
        
        plotOutput("plot", click = "plot_click"),
        verbatimTextOutput("info"),
        
        radioButtons("first_page", 
                     "Which of the policies would you like to choose?",
                     choices = c("5,5", "2,2", "7,7", "9,1","1,9","4,4","1,1","1,10"),  
                     selected = character(0))
      ))
    }
    
    if (question$i==-b+1){
      return(div(fluidPage(
        # HTML('<iframe width="560" height="315" src="https://www.youtube.com/embed/-CrOeCzMFSQ?si=3pKfFn_AnvVXKASX" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>'),
        
        radioButtons(
          "sec_page",
          "This is the second page.",
          choices = list(
            "Amazing" = 'amaze'
          ),
          width = '100%',
          selected = character(0)
        )
      )))
      
    }
    if (question$i > -b+1){
      p("This is the third and last page.")
    }
    
  }
  
  
  )
  
}


shinyApp(ui, server)